- hosts: localhost

  vars_files:
    -  setup_vars.yml

  tasks:

  - block:

    - name: Install required apt packages
      apt:
        name: "{{item}}"
      become: true
      with_items: "{{ apt_packages }}"

    - name: Start and Enable docker service
      shell: systemctl enable docker; systemctl start docker
      args:
        executable:  /bin/bash
      register: docker_enable
      become: true

    - name: check docker service status
      shell:  systemctl status docker
      args: 
        executable: /bin/bash
      register: docker_status
      become: true
      until: "'active' and 'running' in docker_status.stdout"
      delay: 30
      retries: 5 

    - name: Download and install required  curl packages
      shell: curl {{ item }}
      args:
        executable:  /bin/bash
      become: true
      with_items: "{{ curl_packages }}"

    - name: Change file permissions
      shell: chmod +x minikube kubectl
      become: true

    - name: Move to the bin folder
      shell:  mv minikube kubectl /usr/local/bin/
      become: true

    - name: Setup the directory for storing Minikube and kubectl configuration.
      shell: mkdir $HOME/.kube || true

    - name: Create empty file(config) under directory.
      shell: touch $HOME/.kube/config

    - name: Start Minikube with option vm-driver=docker
      shell: minikube start -p {{ cluster_name }} --vm-driver=docker --insecure-registry "10.0.0.0/24"
      args:
        executable: /bin/bash

    - name: After minikube configuration, we check minikube status
      shell: minikube status -p {{ cluster_name }}
      args:
        executable: /bin/bash
      register: minikube_status
      until: "'minikube' and 'Running' in minikube_status.stdout"
      delay: 30
      retries: 10

    - name: Create embedded kubeconfig
      shell: |
        eval "$(minikube docker-env -p {{ cluster_name }})"
        export LOCAL_K8S_IP="$(minikube docker-env -p {{ cluster_name }} | grep -oh -E '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*')"
        kubectl config set-cluster {{ cluster_name }} --server https://$LOCAL_K8S_IP:8443 --certificate-authority=/home/vagrant/.minikube/ca.crt  --embed-certs=true --kubeconfig files/kubeconfig_embed
        kubectl config set-credentials {{ cluster_name }} --client-certificate=/home/vagrant/.minikube/profiles/{{ cluster_name }}/client.crt --client-key=/home/vagrant/.minikube/profiles/{{ cluster_name }}/client.key  --embed-certs=true --kubeconfig files/kubeconfig_embed
        kubectl config set-context {{ cluster_name }} --cluster={{ cluster_name }} --user={{ cluster_name }} --kubeconfig  files/kubeconfig_embed
        kubectl config use-context {{ cluster_name }} --kubeconfig files/kubeconfig_embed

    - name: Build the custom Jenkins image
      shell: |
        eval "$(minikube docker-env -p {{ cluster_name }})"
        cd ~/service/ansible_code/docker/jenkins
        make build 
      args:
        executable: /bin/bash

    - name: start Jenkins
      shell: |
        eval "$(minikube docker-env -p {{ cluster_name }})"
        kubectl create namespace jenkins
        cd ~/service/ansible_code/minikube
        kubectl apply -f files/jenkins-deployment.yml --namespace jenkins
        kubectl apply -f files/jenkins-service.yml --namespace jenkins
      args:
        executable: /bin/bash

    - name: Create DOCKER_HOST secrets and ConfigMaps in Jenkins
      # Needed to be able to build docker Images and push to the minikube docker registry
      shell: |
        eval "$(minikube docker-env -p {{ cluster_name }})"
        cd ~/service/ansible_code/minikube/files
        [ ! -d certs ] && mkdir certs
        cp -R ${DOCKER_CERT_PATH}/* ./certs
        kubectl -n jenkins apply -k .
      args:
        executable: /bin/bash
    
    # restore step 
    - name: Create Jenkins Secrets
      shell: |
        export LOCAL_K8S_IP="$(minikube docker-env -p {{ cluster_name }} | grep -oh -E '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*')"
        cd ~/service/ansible_code/minikube/files
        sleep 120 # Wait for Jenkins to be ready
        wget -nc ${LOCAL_K8S_IP}:30000/jnlpJars/jenkins-cli.jar
        java -jar jenkins-cli.jar  -s http://admin:admin@$LOCAL_K8S_IP:30000 create-credentials-by-xml system::system::jenkins _ < kube-config-secrets.xml

    - name: Restore Jobs
      shell: |
        cd ~/service/ansible_code/docker/jenkins
        export LOCAL_K8S_IP=$(minikube docker-env -p {{ cluster_name }} | grep -oh -E '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*')
        wget -nc $LOCAL_K8S_IP:30000/jnlpJars/jenkins-cli.jar
        java -jar jenkins-cli.jar -s http://admin:admin@$LOCAL_K8S_IP:30000 create-job hello_world < hello_world.job
        java -jar jenkins-cli.jar -s http://admin:admin@$LOCAL_K8S_IP:30000 create-job create_app_container < create_app_container.job
        java -jar jenkins-cli.jar -s http://admin:admin@$LOCAL_K8S_IP:30000 create-job hello_world_test < hello_world_test.job
        java -jar jenkins-cli.jar -s http://admin:admin@$LOCAL_K8S_IP:30000 create-job deploy_to_k8s < deploy_to_k8s.job
      args:
        executable: /bin/bash

